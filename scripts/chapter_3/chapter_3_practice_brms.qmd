---
title: "Chapter 3 Practice BRMS"
format: html
---

```{r}
rm(list = ls())
library(tidybayes)
library(tidyverse)
library(rethinking)
library(scales)
```

# Easy problems
```{r}
n_success <- 6
n_trials <- 9

d <-
  tibble(p_grid = seq(from = 0, to = 1, length.out = 1000),
         prior = rep(1, 1000)) |> 
  mutate(likelihood = dbinom(n_success, size = n_trials, prob = p_grid)) |> 
  mutate(posterior = (likelihood * prior) / sum(likelihood * prior))

set.seed(100)

n_samples <- 1e4

samples <- slice_sample(d, n = n_samples, weight_by = posterior, replace = T) |> 
  arrange(p_grid)
```

**3E1**
```{r}
samples |> 
  filter(p_grid < .2) |> 
  summarize(mean = n() / n_samples)
```

**3E2**
```{r}
samples |> 
  filter(p_grid > .8) |> 
  summarize(mean = n() / n_samples)

```

**3E3**
```{r}
samples |> 
  filter(p_grid > .2 & p_grid < .8) |> 
  summarize(mean = n() / n_samples)
```

**3E4**
```{r}
samples |> 
  pull(p_grid) |> 
  quantile(prob = .2)
```

**3E5**
```{r}
samples |> 
  pull(p_grid) |> 
  quantile(prob = .8)
```

**3E6**
```{r}
mode_hdi(samples$p_grid, .width = .66)
```

**3E7**
```{r}
median_qi(samples$p_grid, .width = .66)
```

# Medium problems
**3M1**
```{r}
n_success <- 8
n_trials <- 15

(
  d <-
    tibble(p_grid = seq(from = 0, to = 1, length.out = 1e4),
           prior = rep(1, 1e4)) |> 
    mutate(likelihood = dbinom(n_success, size = n_trials, prob = p_grid)) |> 
    mutate(posterior = (likelihood * prior) / sum(likelihood * prior))
)

d |> 
  ggplot(aes(x = p_grid, y = posterior)) +
  geom_point() +
  geom_line() +
  labs(x = "Proportion Water (p)", y = "Posterior Density")
```

**3M2**
```{r}
set.seed(101)
samples <-
  slice_sample(d, n = 1e4, weight_by = posterior, replace = T)

samples |> 
  pull(p_grid) |> 
  mode_hdi(.width = .90)
```
**3M3**
```{r}
w <- rbinom(1e4, size = 15, prob = samples$p_grid)
mean(w == 8)
```

**3M4**
```{r}
w <- rbinom(1e4, size = 9, prob = samples$p_grid)
mean(w == 6)
```

**3M5**
```{r}

# 3M5.1
d <-
  tibble(p_grid = seq(from = 0, to = 1, length.out = 1e4),
         prior = ifelse(p_grid < 0.5, 0, 1)) |> 
  mutate(likelihood = dbinom(n_success, size = n_trials, prob = p_grid)) |> 
  mutate(posterior = (likelihood * prior) / sum(likelihood * prior))

d |> 
  ggplot(aes(x = p_grid, y = posterior)) +
  geom_point() +
  geom_line() +
  labs(x = "Proportion of water (p)", y = "Posterior density")

# 3M5.2
samples <-
  slice_sample(d, weight_by = posterior, n = 1e4, replace = T)

samples |> 
  mode_hdi(.width = .9)

# 3M5.3
w <- rbinom(1e4, size = 15, prob = samples$p_grid)
mean(w == 8)

# 3M5.4
w <- rbinom(1e4, size = 9, prob = samples$p_grid)
mean(w == 6)
```

**3M6** Suppose you want to estimate the Earth’s proportion of water very precisely. Specifically, you want the 99% percentile interval of the posterior distribution of p to be only 0.05 wide. This means the distance between the upper and lower bound of the interval should be 0.05. How many times will you have to toss the globe to do this?
```{r}
single_sim <- function(tosses, prior_type = c("uniform", "step")){
  prior_type <- match.arg(prior_type)
  obs <- rbinom(1, size = tosses, prob = .7)
  
  p_grid <- seq(from = 0, to = 1, length.out = 1000)
  prior <- rep(1, 1000)
  if(prior_type == "step") prior[1:500] <- 0
  
  likelihood <- dbinom(obs, size = tosses, prob = p_grid)
  posterior <- likelihood * prior
  posterior <- posterior / sum(posterior)
  
  samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T)
  interval <- PI(samples, prob = .99)
  width <- interval[2] - interval[1]
}

single_cond <- function(tosses, prior_type, reps = 100){
  tibble(tosses = tosses,
         prior_type = prior_type,
         width = map_dbl(seq_len(reps), ~single_sim(tosses = tosses,
                                                    prior_type = prior_type)))
}

simulation <- crossing(tosses = seq(1000, 5000, by = 100),
                       prior_type = c("uniform", "step")) |> 
  pmap_dfr(single_cond, reps = 100) |> 
  group_by(tosses, prior_type) |> 
  summarize(avg_width = mean(width), .groups = "drop") |> 
  mutate(prior_type = case_when(prior_type == "uniform" ~ "Uniform Prior",
                                prior_type == "step" ~ "Step Prior"),
         prior_type = factor(prior_type, levels = c("Uniform Prior",
                                                    "Step Prior")))

ggplot(simulation, aes(x = tosses, y = avg_width)) +
  facet_wrap(~prior_type, nrow = 1) +
  geom_point() +
  geom_line() +
  scale_x_continuous(labels = comma)
  labs(x = "Tosses", y = "Average Interval Width") +
  theme(panel.spacing.x = unit(2, "lines"))
```

# Hard problems

Data preparation
```{r}
rm(list = ls())
data(homeworkch3)
```

**3H1.** Using grid approximation, compute the posterior distribution for the probability of a birth being a boy. Assume a uniform prior probability. Which parameter value maximizes the posterior probability?
```{r}
n_boy <- sum(birth1) + sum(birth2)
n_data <- length(birth1) + length(birth2)

(
  d <-
  tibble(p_grid = seq(from = 0, to = 1, length.out = 1e4),
         prior = 1) |> 
    mutate(likelihood = dbinom(n_boy, size = n_data, prob = p_grid)) |> 
    mutate(posterior = (likelihood * prior) / sum(likelihood * prior))
)

d |> slice_max(posterior)

d |> 
  ggplot(aes(x = p_grid, y = posterior)) +
  geom_line() +
  labs(x = "Proportion boys (p)", y = "Posterior Density")
```

**3H2.** Using the sample function, draw 10,000 random parameter values from the posterior distribution you calculated above. Use these sample to estimate the 50%, 89%, and 97% highest posterior density intervals.
```{r}
samples <-
  slice_sample(d, n = 10000, weight_by = posterior, replace = T)

mode_hdi(samples$p_grid, .width = c(.5, .89, .97))
```

**3H3.** Use rbinom to simulate 10,000 replicates of 200 births. You should end up with 10,000 numbers, each one a count of boys out of 200 births. Compare the distribution of predicted numbers of boys to the actual count in the data (111 boys out of 200 births). There are many good ways to visualize the simulations, but the dens command (part of the rethinking package) is prbably the easiest way in this case. Does it look like the model fits the data well? That is, does the distribution of predictions include the actual observation as a central, likely outcome?
```{r}
sim_boys <- rbinom(1e4, size = 200, prob = samples$p_grid)

ggplot(mapping = aes(x = sim_boys)) +
  geom_histogram() +
  geom_vline(xintercept = n_boy, color = "red", linetype = 4)
```

**3H4.** Now compare 10,000 counts of boys from 100 simulated first borns only the number of boys in the first births, birth1. How does the model look in this light?
```{r}
n_boys_1 <- sum(birth1)
sim_boys <- rbinom(1e4, size = 100, prob = samples$p_grid)

ggplot(mapping = aes(x = sim_boys)) +
  geom_histogram() +
  geom_vline(xintercept = n_boys_1, color = "red", linetype = 4)
```

**3H5.** The model assumes that sex of first and second births are independent. To check this assumption, focus now on second births that followed female first borns. Compare 10,000 simulated conts of boys to only those second births that followed girls. To do this correctly, you need to count the number of first borns who were girls and simulate that many births, 10,000 times. Compare the counts of boys in your simulations to the actual observed count of boys following girls. How does the model look in this light? Any guesses what is going on in these data?
```{r}
n_f1_b2 <- sum(birth2[which(birth1 == 0)])
n_f1 <- length(birth1) - sum(birth1)

sim_f1_b2 <- rbinom(1e4, size = n_f1, prob = samples$p_grid)

ggplot(mapping = aes(x = sim_f1_b2)) +
  geom_histogram() +
  geom_vline(xintercept = n_f1_b2, color = "red", linetype = 4)
```

## 1.3 Homework
**1.** Suppose the globe tossing data (Chapter 2) had turned out to be 4 water and 11 land. Construct the posterior distribution, using grid approximation. Use the same flat prior as in the book.
```{r}
dist <-
  tibble(p_grid = seq(from = 0, to = 1, length.out = 1e3),
         prior = 1) |> 
  mutate(likelihood = dbinom(4, size = 15, prob = p_grid)) |> 
  mutate(posterior = (likelihood * prior) / sum(likelihood * prior))

dist
```

```{r}
dist |> 
  slice_sample(n = 1e4, weight_by = posterior, replace = T) |> 
  ggplot(aes(x = p_grid)) +
  stat_histinterval(.width = c(.67, .89, .97), breaks = seq(0, 1, .02), point_interval = mean_hdci)
  labs(x = "Proportion of Water (p)", y = "Posterior Density")
```

**2.** Now suppose the data are 4 water and 2 land. Compute the posterior again, but this time use a prior that is zero below p = 0.5 and a constant above p = 0.5. This corresponds to prior information that a majority of the Earth’s surface is water.
```{r}
dist <-
  tibble(p_grid = seq(from = 0, to = 1, length.out = 1e3),
         prior = ifelse(p_grid < .5, 0, 1)) |> 
  mutate(likelihood = dbinom(4, size = 6, prob = p_grid)) |> 
  mutate(posterior = (likelihood * prior) / sum(likelihood * prior))

dist |> 
  slice_sample(n = 1e4, weight_by = posterior, replace = T) |> 
  ggplot(aes(x = p_grid)) +
  stat_histinterval(.width = c(.67, .89, .97), breaks = seq(0, 1, .02), point_interval = mean_hdci)
  labs(x = "Proportion of Water (p)", y = "Posterior Density")
```

**3.** For the posterior distribution from 2, compute 89% percentile and HPDI intervals. Compare the widths of these intervals. Which is wider? Why? If you had only the information in the interval, what might you misunderstand about the shape of the posterior distribution?
```{r}
intervals <-
  dist |> 
  slice_sample(n = 1e4, weight_by = posterior, replace = T) |> 
  reframe(bound = c("lower", "upper"),
            pi = PI(p_grid, prob = .89),
            hpdi = HPDI(p_grid, prob = .89))

intervals
```

