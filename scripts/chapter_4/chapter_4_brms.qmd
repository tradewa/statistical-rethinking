---
title: "Chapter 4 BRMs"
format: html
---
```{r}
library(tidyverse)
library(patchwork)
```


# 4 Geocentric Models
## 4.1 Why normal distributions are normal
### 4.1.1 Normal by addition
Here's a way to do the simulation necessary for the plot in the top panel of Figure 4.2
```{r}
set.seed(4)

pos <-
  # make data with 100 people, 16 steps each with a starting point of `step == 0` (i.e., 17 rows per person)
  crossing(person = 1:100,
           step = 0:16) %>% 
  # for all steps above `step == 0` simulate a 'deviation'
  mutate(deviation = map_dbl(step, ~if_else(. == 0, 0, runif(1, -1, 1)))) |> 
  # after grouping by 'person', compute the cumulative sum of the deviations, then 'ungroup()'
  group_by(person) |> 
  mutate(position = cumsum(deviation)) |> 
  ungroup()

glimpse(pos)

ggplot(data = pos,
       aes(x = step, y = position, group = person)) +
  geom_vline(xintercept = c(4, 8, 16), linetype = 2) +
  geom_line(aes(color = person < 2, alpha = person < 2)) +
  scale_color_manual(values = c("skyblue4", "black")) +
  scale_alpha_manual(values = c(1/5, 1)) +
  scale_x_continuous("step number", breaks = 0:4 * 4) +
  theme(legend.position = "none")
```

Code for the bottom three plots
```{r}
# Figure 4.2.a.
p1 <-
  pos |> 
  filter(step == 4) |> 
  ggplot(aes(x = position)) +
  geom_line(stat = "density", color = "dodgerblue1") +
  labs(title = "4 steps")

# Figure 4.2.b.
p2 <-
  pos |> 
  filter(step == 8) |> 
  ggplot(aes(x = position)) +
  geom_density(color = "dodgerblue2", outline.type = "full") +
  labs(title = "8 steps")

# this is an intermediary step to get an SD value
sd <-
  pos |> 
  filter(step == 16) |> 
  summarize(sd = sd(position)) |> 
  pull(sd)

# Figure 4.2.c.
p3 <-
  pos |> 
  filter(step == 16) |> 
  ggplot(aes(x = position)) +
  stat_function(fun = dnorm,
                args = list(mean = 0, sd = sd),
                linetype = 2) +
  geom_density(color = "transparent", fill = "dodgerblue3", alpha = 1/2) +
  labs(title = "16 steps",
       y = "density")

# combine the ggplots
(p1 | p2 | p3) & coord_cartesian(xlim = c(-6, 6))
```

### 4.1.2 Normal by multiplication
```{r}
set.seed(4)

prod(1 + runif(12, 0, .1))
```

