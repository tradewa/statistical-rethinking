---
title: "Chapter 4 - Exercise"
format: html
---

### Easy problems

**4E1.** In the model definition below, which line is the likelihood?

$y_{i} \sim Normal(\mu, \sigma)$

$\mu \sim Normal(0, 10)$

$\sigma \sim Exponential(1)$

The answer is $y_{i}$

**4E2.** In the model definition just above, how many parameters are in the posterior distribution?

2 which are $\mu$ and $\sigma$

**4E3.** Using the model definition above, write down the appropriate for of Bayes' theorem that includes the proper likelihood and priors

$Pr(\mu, \sigma | y) = \dfrac{Pr(y | \mu, \sigma)Pr(\mu)Pr(\sigma)}{\int \int Pr(y|\mu, \sigma)Pr(\mu)Pr(\sigma)d\mu d\sigma}$

### Medium problems

**4M1.** For the model definition below simulate observed y values from the prior (not the posterior)

$y_{i} \sim Normal(\mu, \sigma)$
$\mu \sim Normal(0, 10)$
$\sigma \sim Exponential(1)$

```{r}
library(rethinking)
mu_prior <- rnorm(1e4, 0, 10)
sigma_prior <- rexp(1e4, 1)
h_sim <- rnorm(1e4, mu_prior, sigma_prior)
dens(h_sim)
```

**4M2.** Translate the model just above into a quap formula.
```{r}
alist(
  y ~ dnorm(mu, sigma),
  mu ~ dnorm(0, 10),
  sigma ~ dexp(1)
)
```

**4M3.** Translate the quap model formula below into a mathematical model definition
```{r}
alist(
  y ~ dnorm(mu, sigma),
  mu <- a + b*x,
  a ~ dnorm(0, 10),
  b ~ dunif(0, 1),
  sigma ~ dexp(1)
)
```

**4M7.** Refit model m4.3 from the chapter, but omit the mean weight xbar this time. Compare the new model's posterior to that of the original model. In particular, look at the covariance among the parameters. What is different? Then compare the posterior predictions of both models.
```{r}
rm(list = ls())
library(rethinking)
data("Howell1")
d <- Howell1
d2 <- d[d$age >= 18, ]

m1 <- quap(
  alist(
    height ~ dnorm(mu, sigma),
    mu <- a + b * (weight - mean(weight)),
    a ~ dnorm(178, 20),
    b ~ dnorm(0, 1),
    sigma ~ dunif(0, 50)
  ),
  data = d2
)

m2 <- quap(
  alist(
    height ~ dnorm(mu, sigma),
    mu <- a + b * weight,
    a ~ dnorm(178, 20),
    b ~ dnorm(0, 1),
    sigma ~ dunif(0, 50)
  ),
  data = d2
)

precis(m1)
precis(m2)

round(vcov(m1), 3)
round(vcov(m2), 3)

# Create visualization of height prediction for every weight value

# define sequences of weights to compute prediction
weight.seq <- seq(from = 25, to = 70, by = 1)

# use link to compute mu 
# for each sample from posterior
# and for each weight in weight.seq
mu1 <- link(m1, data = data.frame(weight = weight.seq))
mu2 <- link(m2, data = data.frame(weight = weight.seq))

plot(height ~ weight, d2, type = "n")
for(i in 1:100)
  points(weight.seq, mu1[i,], pch = 16, col = "red")
  points(weight.seq, mu2[i,], pch = 16, col = "blue")
```

```{r}
mu1.mean <- apply(mu1, 2, mean)
mu2.mean <- apply(mu2, 2, mean)

mu1.PI <- apply(mu1, 2, PI, prob = 0.89)
mu2.PI <- apply(mu2, 2, PI, prob = 0.89)

plot(height ~ weight, data = d2, col = col.alpha(rangi2, 0.5))

lines(weight.seq, mu1.mean, col = "red")
lines(weight.seq, mu2.mean, col = "blue")

shade(mu1.PI, weight.seq, col = "red")
shade(mu2.PI, weight.seq, col = "blue")
```

### Hard problems

**4H1.** The weights listed below were recorded in the !Kung census, but heights were not recorded for these individuals. Provide predicted heights and 89% intervals for each of these individuals. That is, fill in the table below, using model-based predictions.
```{r}
rm(list = ls())

library(rethinking)
data("Howell1")
d <- Howell1
d2 <- d[d$age >= 18, ]
xbar <- mean(d2$weight)
weight_col <- c(46.95, 43.72, 64.78, 32.59, 54.63)
height_col <- rep(0, 5)
hpdi_col <- replicate(5, HPDI(rep(1, 5)))
output <- data.frame(weight_col, height_col, hpdi_col[1,], hpdi_col[2,])

m <- quap(
  alist(
    height ~ dnorm(mu, sigma),
    mu <- a + b * (weight - xbar),
    a ~ dnorm(178, 20),
    b ~ dnorm(0, 10),
    sigma ~ dunif(0, 50)
  ),
  data = d2
)

precis(m)
round(vcov(m), 3)

post <- extract.samples(m)
str(post)

for(i in 1:5){
  y <- rnorm(1e5, post$a + post$b * (output$weight_col[i] - xbar), post$sigma)
  output$height_col[i] <- mean(y)
  output$hpdi_col.1...[i] <- HPDI(y)[1]
  output$hpdi_col.2...[i] <- HPDI(y)[2]
}
  
```

**4H2.** Select out all the rows in the Howell1 data with ages below 18 years
a. Fit a linear regression to this data, using quap. Present and interpret the estimates. For every 10 units of increase in weight, how much taller does the model predict a child gets?
```{r}
rm(list = ls())
library(rethinking)
data("Howell1")
d <- Howell1[Howell1$age < 18, ]
xbar <- mean(d$weight)

m <- quap(
  alist(
    height ~ dnorm(mu, sigma),
    mu <- a + b * (weight - xbar),
    a ~ dnorm(150, 20),
    b ~ dnorm(0, 10),
    sigma ~ dunif(0, 20)
  ),
  data = d
)

precis(m)
```

b. Plot the raw data, with height on the vertical axis and weight on the horizontal axis. Superimpose the MAP regression line and 89% interval for the mean. Also superimpose the 89% interval for predicted heights
```{r}
library(ggplot2)

weight.seq <- seq(from = 0, to = 50, by = 1)
mu <- link(m, data = data.frame(weight = weight.seq))
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)

sim.height <- sim(m, data = list(weight = weight.seq))
height.PI <- apply(sim.height, 2, PI)

plot(height ~ weight, data = d, col = col.alpha(rangi2, 0.5))
lines(weight.seq, mu.mean)
shade(mu.PI, weight.seq)
shade(height.PI, weight.seq)
```

**4H3.** Our expert colleagues think that logarithm of body weight scales with height
a. Model the relationship between height (cm) and natural logarithm of weight (log-kg). Use the entire Howell1 data frame, all 544 rows, adults and non-adults.
```{r}
rm(list = ls())
library(rethinking)
data("Howell1")
d <- Howell1
log_weight <- log(d$weight)
xbar <- mean(log_weight)

m <- quap(
  alist(
    height ~ dnorm(mu, sigma),
    mu <- a + b * (log_weight - xbar),
    a <- dnorm(160, 10),
    b <- dnorm(0, 20),
    sigma <- dunif(0, 50)
  ),
  data = d
)

precis(m)
```

```{r}

log_weight.seq <- log(seq(from = 1, to = 70, by = 1))
mu <- link(m, data = data.frame(log_weight = log_weight.seq))
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)

sim.height <- sim(m, data = list(log_weight = log_weight.seq))
height.PI <- apply(sim.height, 2, PI)

plot(height ~ weight, data = d, col = col.alpha(rangi2, 0.5))
lines(exp(log_weight.seq), mu.mean)
shade(mu.PI, exp(log_weight.seq))
shade(height.PI, exp(log_weight.seq))
```

