---
title: "Chapter 5"
format: html
---

R code 5.1
```{r}
# Load data and copy
rm(list = ls())
library(rethinking)
data("WaffleDivorce")
d <- WaffleDivorce

# standardize variables
d$D <- standardize(d$Divorce)
d$M <- standardize(d$Marriage)
d$A <- standardize(d$MedianAgeMarriage)
```

Create linear regression model for divorce as a function of median age marriage
R code 5.3
```{r}
m5.1 <- quap(
  alist(
    D ~ dnorm(mu, sigma),
    mu <- a + bA * A,
    a ~ dnorm(0, 0.2),
    bA ~ dnorm(0, 0.5),
    sigma ~ dexp(1)
  ), data = d
)
```

Simulate from the priors
R code 5.4
```{r}
set.seed(10)
prior <- extract.prior(m5.1)
mu5.1 <- link(m5.1, post = prior, data = list(A = c(-1, 2)))

plot(NULL, xlim = c(-2, 2), ylim = c(-2, 2))

for (i in 1:50)
  lines(c(-2, 2), mu5.1[i, ], col = col.alpha("black", 0.4))
```

Plot posterior predictions
```{r}
# compute percentile interval of mean
A_seq <- seq(from = -3, to = 3.2, length.out = 30)
mu5.1 <- link(m5.1, data = list(A = A_seq))
mu5.1.mean <- apply(mu5.1, 2, mean)
mu5.1.PI <- apply(mu5.1, 2, PI)

# plot it all
plot(D ~ A, data = d, col = rangi2)
lines(A_seq, mu5.1.mean, lwd = 2)
shade(mu5.1.PI, A_seq)
```

Regression for marriage rate to divorce rate relationship
```{r}
m5.2 <- quap(
  alist(
    D ~ dnorm(mu, sigma),
    mu <- a + bM * M,
    a ~ dnorm(0, 0.2),
    bM ~ dnorm(0, 0.5),
    sigma ~ dexp(1)
  ), data = d
)
```

Simulate posterior predictions for m5.2
```{r}
M_seq <- seq(from = -3, to = 3.2, length.out = 30)
mu5.2 <- link(m5.2, data = list(M = M_seq))
mu5.2.mean <- apply(mu5.2, 2, mean)
mu5.2.PI <- apply(mu5.2, 2, PI)

plot(D ~ M, data = d, col = rangi2)
lines(M_seq, mu5.2.mean, lwd = 2)
shade(mu5.2.PI, M_seq)
```

Drawing DAG
```{r}
library(dagitty)
dag5.1 <- dagitty("dag{ A -> D; A -> M; M-> D}")
coordinates(dag5.1) <- list(x = c(A = 0, D = 1, M = 2), y = c(A = 0, D = 1, M = 0))
drawdag(dag5.1)

dag5.2 <- dagitty("dag{A -> D; A -> M}")
coordinates(dag5.2) <- list(x = c(A = 0, D = 1, M = 2), y = c(A = 0, D = 1, M = 0))
drawdag(dag5.2)

DMA_dag2 <- dagitty("dag{ D <- A -> M}")
impliedConditionalIndependencies(DMA_dag2)

DMA_dag1 <- dagitty("dag{D <- A -> M -> D}")
impliedConditionalIndependencies(DMA_dag1)
```
Multiple linear regression
```{r}
m5.3 <- quap(
  alist(
    D ~ dnorm(mu, sigma),
    mu <- a + bM * M + bA * A,
    a ~ dnorm(0, 0.2),
    bM ~ dnorm(0, 0.5),
    bA ~ dnorm(0, 0.5),
    sigma ~ dexp(1)
  ), data = d
)

precis(m5.3)
plot(precis(m5.3))
plot(coeftab(m5.1, m5.2, m5.3), par = c("bA", "bM"))
```

Relationship of age at marriage (A) and marriage rate (M)
```{r}
mAM <- quap(
  alist(
    M ~ dnorm(mu, sigma),
    mu <- a + b * A,
    a ~ dnorm(0, 0.2),
    b ~ dnorm(0, 0.5),
    sigma ~ dexp(1)
  ), data = d
)

plot(precis(mAM))

A_seq <- seq(from = -3, to = 3.2, length.out = 30)
muAM <- link(mAM, data = list(A = A_seq))
muAM.mean <- apply(muAM, 2, mean)
muAM.PI <- apply(muAM, 2, PI)

plot(M ~ A, data = d, col = rangi2)
lines(A_seq, muAM.mean, lwd = 2)
shade(muAM.PI, A_seq)
```

Simulate divorce example
```{r}
N <- 50 # number of simulated States
age <- rnorm(N) # sim A
mar <- rnorm(N, -age) # sim A -> M
div <- rnorm(N, age) # sim A -> D
```

Plotting multivariate posteriors.

There are three useful (interpretive) plots to understand multivariate linear regressions
1. Predictor residual plots
2. Posterior prediction plots
3. Counterfactual plots

Predictor residual plots
```{r}
m5.4 <- quap(
  alist(
    M ~ dnorm(mu, sigma),
    mu <- a + bAM * A,
    a ~ dnorm(0, 0.2),
    bAM ~ dnorm(0, 0.5),
    sigma ~ dexp(1)
  ), data = d
)

mu <- link(m5.4)
mu_mean <- apply(mu, 2, mean)
mu_resid <- d$M - mu_mean
```

Posterior predictive check
```{r}
# call link without specifying new data
# so it uses original data
mu <- link(m5.3)

# summarize samples across cases
mu_mean <- apply(mu, 2, mean)
mu_PI <- apply(mu, 2, PI)

# simulate observations
# again no new data, so uses original data
D_sim <- sim(m5.3, n = 1e4)
D_PI <- apply(D_sim, 2, PI)

plot(
  mu_mean ~ d$D, 
  col = rangi2, 
  ylim = range(mu_PI), 
  xlab = "Observed divorce",
  ylab = "Predicted divorce")
abline(a = 0, b = 1, lty = 2)
for(i in 1:nrow(d)){
  lines(rep(d$D[i], 2), mu_PI[, i], col = rangi2)
}

identify(x = d$D, y = mu_mean, labels = d$Loc)
```

Simulating spurious association
```{r}
N <- 100 # number of cases
x_real <- rnorm(N) # x_real as Gaussian with mean 0 and stdev 1
x_spur <- rnorm(N, x_real) # x_spur as Gaussian with mean = x_real
y <- rnorm(N, x_real) # y as Gaussian with mean = x_real
d <- data.frame(y, x_real, x_spur) # bind all together in data frame
```

Counterfactual plots
```{r}
rm(list = ls())
data("WaffleDivorce")
d <- list()
d$A <- standardize(WaffleDivorce$MedianAgeMarriage)
d$D <- standardize(WaffleDivorce$Divorce)
d$M <- standardize(WaffleDivorce$Marriage)

m5.3_A <- quap(
  alist(
    ## A-> D <- M
    D ~ dnorm(mu, sigma),
    mu <- a + bM * M + bA * A,
    a ~ dnorm(0, 0.2),
    bM ~ dnorm(0, 0.5),
    bA ~ dnorm(0, 0.5),
    sigma ~ dexp(1),
    
    ## A -> M
    M ~ dnorm(mu_M, sigma_M),
    mu_M <- aM + bAM * A,
    aM ~ dnorm(0, 0.2),
    bAM ~ dnorm(0, 0.5),
    sigma_M ~ dexp(1)
  ), data = d
)

precis(m5.3_A)

A_seq <- seq(from = -2, to = 2, length.out = 30)

# prep data
sim_dat <- data.frame(A = A_seq)

# simulate M and then D, using A_seq
s <- sim(m5.3_A, data = sim_dat, vars = c("M", "D"))

plot(sim_dat$A, colMeans(s$D), ylim = c(-2, 2), type = "l", xlab = "manipulated A", ylab = "counterfactual D")
shade(apply(s$D, 2, PI), sim_dat$A)
mtext("Total counterfactual effect of A on D")
```

Counterfactual effect of A on M
```{r}
A_seq <- seq(from = -2, to = 2, length.out = 30)

# prep data
sim_dat <- data.frame(A = A_seq)

# simulate M and then D, using A_seq
s <- sim(m5.3_A, data = sim_dat, vars = c("M"))

plot(sim_dat$A, colMeans(s), ylim = c(-2, 2), type = "l", xlab = "manipulated A", ylab = "counterfactual D")
shade(apply(s, 2, PI), sim_dat$A)
mtext("Total counterfactual effect of A on M")
```
Numerical summaries of both above counterfactual plots
```{r}
# new data frame, standardized to mean 26.1 and std dev 1.24
sim2_dat <- data.frame(A = (c(20, 30) - 26.1) / 1.24)
s2 <- sim(m5.3_A, data = sim2_dat, vars = c("M", "D"))
mean(s2$D[, 2] - s2$D[, 1])
```


Counterfactual effect of M on D
```{r}
# prep data
sim_dat <- data.frame(M = seq(from = -2, to = 2, length.out = 30), A = 0)

# simulate M and then D, using A_seq
s <- sim(m5.3_A, data = sim_dat, vars = c("D"))

plot(sim_dat$M, colMeans(s), ylim = c(-2, 2), type = "l", xlab = "manipulated M", ylab = "counterfactual D")
shade(apply(s, 2, PI), sim_dat$M)
mtext("Total counterfactual effect of M on D")
```

Simulating counterfactuals on your own
```{r}
library(rethinking)
A_seq <- seq(from = -2, to = 2, length.out = 30)

post <- extract.samples(m5.3_A)
M_sim <- with(post, 
              sapply(1:30, function(i) rnorm(1e3, aM + bAM * A_seq[i], sigma_M)))

D_sim <- with(post,
              sapply(1:30, function(i) rnorm(1e3, a + bA * A_seq[i] + bM * M_sim[, i], sigma)))

mean_D_sim <- apply(D_sim, 2, mean)
plot(mean_D_sim ~ A_seq)
```

### Masked relationship
```{r}
library(rethinking)
data(milk)
d <- milk
str(d)

d$K <- standardize(d$kcal.per.g)
d$N <- standardize(d$neocortex.perc)
d$M <- standardize(log(d$mass))
```
Create linear regression model for milk data
```{r}
dcc <- d[complete.cases(d$K, d$N, d$M), ]

m5.5_draft <- quap(
  alist(
    K ~ dnorm(mu, sigma),
    mu <- a + bN * N,
    a ~ dnorm(0, 1),
    bN ~ dnorm(0, 1),
    sigma ~ dexp(1)
  ), data = dcc
)
```

Prior check for vague priors
```{r}
prior <- extract.prior(m5.5_draft)
xseq <- c(-2, 2)
mu <- link(m5.5_draft, post = prior, data = list(N = xseq))

plot(NULL, xlim = xseq, ylim = xseq)
for(i in 1:50)
  lines(xseq, mu[i, ], col = col.alpha("black", 0.3))
```
Milk linear regression model with smarter prior
```{r}
m5.5 <- quap(
  alist(
    K ~ dnorm(mu, sigma),
    mu <- a + bN * N,
    a ~ dnorm(0, 0.2),
    bN ~ dnorm(0, 0.5),
    sigma ~ dexp(1)
  ), data = dcc
)
precis(m5.5)

prior <- extract.prior(m5.5)
xseq <- c(-2, 2)
mu <- link(m5.5_draft, post = prior, data = list(N = xseq))

plot(NULL, xlim = xseq, ylim = xseq)
for(i in 1:50)
  lines(xseq, mu[i, ], col = col.alpha("black", 0.3))
```

Posterior check
```{r}
xseq <- seq(from = min(dcc$N) - 0.15, to = max(dcc$N) + 0.15, length.out = 30)
mu <- link(m5.5, data = list(N = xseq))
mu_mean <- apply(mu, 2, mean)
mu_PI <- apply(mu, 2, PI)

plot(K ~ N, data = dcc)
lines(xseq, mu_mean, lwd = 2)
shade(mu_PI, xseq)
```

LM model between kilo-calories and body mass
```{r}
m5.6 <- quap(
  alist(
    K ~ dnorm(mu, sigma),
    mu <- a + bM * M,
    a ~ dnorm(0, 0.2),
    bM ~ dnorm(0, 0.5),
    sigma ~ dexp(1)
  ), data = dcc
)
precis(m5.6)

xseq <- seq(from = min(dcc$M) - 0.15, to = max(dcc$M) + 0.15, length.out = 30)
mu <- link(m5.6, data = list(M = xseq))
mu_mean <- apply(mu, 2, mean)
mu_PI <- apply(mu, 2, PI)

plot(K ~ M, data = dcc)
lines(xseq, mu_mean)
shade(mu_PI, xseq)
```

Multivariate model
```{r}
m5.7 <- quap(
  alist(
    K ~ dnorm(mu, sigma),
    mu <- a + bN * N + bM * M,
    a ~ dnorm(0, 0.2),
    bN ~ dnorm(0, 0.5),
    bM ~ dnorm(0, 0.5),
    sigma ~ dexp(1)
  ), data = dcc
)
precis(m5.7)
```

Compare all milk models
```{r}
plot(coeftab(m5.5, m5.6, m5.7), pars = c("bM", "bN"))
```

Counterfactual plots
```{r}
# Counterfactual plots by conditioning on N
xseq <- seq(from = min(dcc$M) - 0.15, to = max(dcc$M) + 0.15, length.out = 30)
mu <- link(m5.7, data = data.frame(M = xseq, N = 0))
mu_mean <- apply(mu, 2, mean)
mu_PI <- apply(mu, 2, PI)
plot(NULL, xlim = range(dcc$M), ylim = range(dcc$K))
lines(xseq, mu_mean, lwd = 2)
shade(mu_PI, xseq)

# Counterfactual plots by conditioning on M
xseq <- seq(from = min(dcc$N) - 0.15, to = max(dcc$N) + 0.15, length.out = 30)
mu <- link(m5.7, data = data.frame(N = xseq, M = 0))
mu_mean <- apply(mu, 2, mean)
mu_PI <- apply(mu, 2, PI)

plot(NULL, xlim = range(dcc$N), ylim = range(dcc$K))
lines(xseq, mu_mean, lwd = 2)
shade(mu_PI, xseq)
```

DAG for three possibilities
```{r}
# M -> K <- N
# M -> N
n <- 100
M <- rnorm(n)
N <- rnorm(n, M)
K <- rnorm(n, N - M)
d_sim <- data.frame(K = K, N = N, M = M)

# M -> K <- N
# N -> M
n <- 100
N <- rnorm(n)
M <- rnorm(n, N)
K <- rnorm(n, N - M)
d_sim2 <- data.frame(K = K, M = M, N = N)

# M -> K <- N
# M <- U -> N
n <- 100
U <- rnorm(n)
N <- rnorm(n, U)
M <- rnorm(n, U)
K <- rnorm(n, N - M)
d_sim3 <- data.frame(K = K, N = N, M = M)
```

Dag 5.7
```{r}
library(dagitty)
dag5.7 <- dagitty( "dag{
                    M -> K <- N
                    M -> N}")
coordinates(dag5.7) <- list(x = c(M = 0, K = 1, N = 2), y = c(M = 0, K = 1, N = 0.5))
MElist <- equivalentDAGs(dag5.7)

drawdag(MElist)
```

### Categorical variables
```{r}
data("Howell1")
d <- Howell1
str(d)

mu_female <- rnorm(1e4, 178, 20)
mu_male <- rnorm(1e4, 178, 20) + rnorm(1e4, 0, 10)
precis(data.frame(mu_female, mu_male))
```

```{r}
d$sex <- ifelse(d$male == 1, 2, 1)
str(d$sex)

m5.8 <- quap(
  alist(
    height ~ dnorm(mu, sigma),
    mu <- a[sex],
    a[sex] <- dnorm(178, 20),
    sigma ~ dunif(0, 50)
  ), data = d
)

precis(m5.8, depth = 2)

post <- extract.samples(m5.8)
post$diff_fm <- post$a[, 1] - post$a[, 2]
precis(post, depth = 2)
```

```{r}
rm(list = ls())
library(rethinking)
data(milk)
d <- milk
levels(d$clade)
d$clade_id <- as.integer(d$clade)
```

```{r}
d$K <- standardize(d$kcal.per.g)
m5.9 <- quap(
  alist(
    K ~ dnorm(mu, sigma),
    mu <- a[clade_id],
    a[clade_id] ~ dnorm(0, 0.5),
    sigma ~ dexp(1)
  ), data = d
)
labels <- paste("a[", 1:4, "]:", levels(d$clade), sep = "")
plot(precis(m5.9, depth = 2, pars = "a"), labels = labels, xlab = "expected kcal (std)")
```

```{r}
set.seed(63)
d$house <- sample(rep(1:4, each = 8), size = nrow(d))

m5.10 <- quap(
  alist(
    K ~ dnorm(mu, sigma),
    mu <- a[clade_id] + h[house],
    a[clade_id] ~ dnorm(0, 0.5),
    h[house] ~ dnorm(0, 0.5),
    sigma ~ dexp(1)
  ), data = d
)

plot(precis(m5.10, depth = 2, pars = "a"), xlab = "expected kcal (std)")
```

